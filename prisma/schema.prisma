generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  followers            Follows[]      @relation("following")
  following            Follows[]      @relation("follower")
  notifications        Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")

  hostedSpaces      Space[]            @relation("UserHostedSpaces")
  invites           Invite[]           @relation("UserInvites")
  invitedBy         Invite[]           @relation("UserInvitedBy")
  spaceSessions     SpaceSession[]
  spaceParticipants SpaceParticipant[]
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

//
// âœ… New Models for Audio Spaces
//

model Space {
  id          String   @id @default(cuid())
  title       String
  description String?
  hostId      String
  isPrivate   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  host         User               @relation("UserHostedSpaces", fields: [hostId], references: [id], onDelete: Cascade)
  invites      Invite[]           @relation("SpaceInvites")
  sessions     SpaceSession[]
  participants SpaceParticipant[]
}

model Invite {
  id          String   @id @default(cuid())
  spaceId     String
  invitedId   String
  invitedById String
  createdAt   DateTime @default(now())

  space     Space @relation("SpaceInvites", fields: [spaceId], references: [id], onDelete: Cascade)
  invited   User  @relation("UserInvites", fields: [invitedId], references: [id], onDelete: Cascade)
  invitedBy User  @relation("UserInvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([spaceId, invitedId])
}

model SpaceSession {
  id       String    @id @default(cuid())
  spaceId  String
  userId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([spaceId, userId])
}

model SpaceParticipant {
  id       String   @id @default(cuid())
  spaceId  String
  userId   String
  role     Role     @default(LISTENER)
  joinedAt DateTime @default(now())
  muted    Boolean  @default(false)

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
}

enum Role {
  HOST
  COHOST
  LISTENER
}
